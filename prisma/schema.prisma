// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model UserSettings {
  userId   String @id
  currency String
}

model Project {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  userId             String // Foreign key for the user
  clientSatisfaction Float?

  startDate DateTime?
  deadline  DateTime?

  tasks    Task[] // Relationship to tasks
  budgetId String?

  status         String @default("ONGOING")
  priority       String @default("Medium")
  budget         Int?
  usedBudget     Int?
  numberOfTasks  Int    @default(0)
  completedTasks Int    @default(0)
}

model Task {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  userId      String // Foreign key for the user
  projectId   String // Foreign key for the project
  project     Project  @relation(fields: [projectId], references: [id])

  status         String    @default("Ongoing")
  priority       String    @default("Medium")
  dueDate        DateTime?
  assignedTo     String?
  estimatedHours Float?
  actualHours    Float?

  dependencyId String? @unique
  dependency   Task?   @relation(name: "TaskDependencies", fields: [dependencyId], references: [id])

  dependentOnId String? @unique
  dependentOn   Task?   @relation(name: "TaskDependencies")

  riskFlag    Boolean       @default(false)
  TaskHistory TaskHistory[]
}

model TaskHistory {
  id        String    @id @default(uuid())
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id])
  userId    String
  version   String
  changes   String
  updatedBy String
  updatedAt DateTime?
}

model Category {
  createdAt DateTime @default(now())
  name      String
  userId    String
  icon      String
  type      String   @default("income")

  @@unique([name, userId, type])
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  amount       Float
  description  String
  date         DateTime
  userId       String
  type         String   @default("income")
  category     String
  categoryIcon String

  // Relationship: A transaction is associated with a user via userId
  // Relationship: A transaction is associated with a category via category and categoryIcon
}

model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float
  // Relationship: MonthHistory is associated with a user via userId

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  income  Float
  expense Float
  // Relationship: YearHistory is associated with a user via userId

  @@id([month, year, userId])
}
